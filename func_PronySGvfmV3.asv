function SG_param=func_PronySGvfmV4(strain,time,SG,ShearSG,...
    exactProps,intGuess,ub,lb,SolveOpts,minOpts)

%This script is written to perform a nonlinear identification on a prony
%series viscoelastic model using the stress gage formulation of the
%nonlinear virtual fields method

%Author: Andrew Matejunas
%Created:
%Validated:

%Change log:
    %V2- Added constraints to K and G
    %2/8/2020- added capability to attempt to identify quasistatic modulus
    %V3- Added ability to simultaneously identify K and G
    %V4- Changed constitutive stress reconstruction algorithm to V6 which
        %uses the process described in Mun2006 (V3 is obsolete and cannot
        %identify K and G if effective Poisson's ratio is time dependent.

% Description
    %This script identifies material parameters by performing a nonlinear
    %minimization of the cost function:
        %phi=[(Stress calculated w/ stress gage) - (stress calculated with
        %the constitutive model)]^2
%Input parameters
    %strain- strain, either measured or output by the FE model with fields
        %x- normal strain in the x direction
        %y- normal strain in the y direction
        %s- shear strains in xy plane
    %SG- stress calculated with the stress gage equation
    %exactProps- structure containing exact material properties. Contents
        %will vary depending on the assumptions made in the formulation of
        %the problem. Common parameters are
            %Kinf- Long term bulk modulus (commonly assumed to be the
                %quasi-static bulk modulus)
            %Ginf-long term shear modulus
            %nu- QS Poisson's ratio
    %intGuess- initial guesses for the parameters that will be identified 
        %with order (order is this way to reshape into a vector)
        %[K1,K2,...,Kn;...
        % G1,G2,...,Gn;...
        % tau1,tau2,...,taun];  
           
     %ub- matrix of upper bounds on the parameters w/ rows [Ki;Gi;Taui]
     %lb- matrix of lower bounds on the parameters w/ columns [Ki;Gi;Taui;]
      
     %SolveOpts- solver options for the fmincon function
        %Options inculde
            %constnu- Assumes Poisson's ratio is not dependent on strain
                %rate and remains known. Possible values are 1 and
                %0. Use 1 if nu does not depend on strain rate 
            %KGsame- Assumes the same rate dependence for K and G. Possile 
                %values are true and false. Use if ki=gi for all time 
                %constants.
            %identEinf- Determines whether E inf is assumed or a variable
                %to solve for. Possible values are true or false
            %identForm- string specifying whether E is identified or K and
                %G. 'E'=Uses the E formulation. 'KG'= identifies both bulk
                %and shear modulus. NOTE: K and G are always passed into
                %the constitutive model. 
           %minFunc- which function is used to perform the minimization
     %MinOpts- minimization option imputs for the function of choice      
        %Algorithm-  which minimization algorithm is used in the
                %minimization function
           
%output parameters
       %SGparam- parametrs identified with stress gage nonlinear vfm
           %algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %% Put exact Properties into form used by the cost function
            knownParam=[exactProps.Kinf,exactProps.Ginf,exactProps.nu,....
                SolveOpts.constnu];
        
%%  Run the minimization algorithm if Einf is assumed to be known
if SolveOpts.identEinf==false
    if SolveOpts.constnu==1
        if SolveOpts.KGsame==true
            %% Reshape bounds and initial guesses into vectors
            ubvec=reshape(ub,[1,numel(ub)]);
            lbvec=reshape(lb,[1,numel(lb)]);
            guessvec=reshape(intGuess,[1,numel(intGuess)]);
            
           %% Constrain realtionship between K and G
           nu=exactProps.nu;

           Aeq=[-3*(1-2*nu)/(2*(1+nu)),1,0];
           Beq=0;
            %% run minimization
            identParam=fmincon(@(constParam)func_ViscoCostSGV3(SG,...
                knownParam,constParam,strain,time),...
                guessvec,...
                [],... %A
                [],... %b
                Aeq,... %Aeq
                Beq,... beq
                lbvec,ubvec,... %upper and lower bounds
                [],...
                minOpts);
                
        end    
    end
    if SolveOpts.constnu==0 && SolveOpts.KGsame==false
            %% set up bounding vectors
            ubvec=reshape(ub,[1,numel(ub)]);
            lbvec=reshape(lb,[1,numel(lb)]);
            guessvec=reshape(intGuess,[1,numel(intGuess)]);
            
            %% set up lack of constraint
            Aeq=[];
            Beq=[];
            
            %% run the minimization
     identParam=fmincon(@(constParam)func_ViscoKGcostSG(SG,ShearSG,...
                knownParam,constParam,strain,time),...
                guessvec,...
                [],... %A
                [],... %b
                Aeq,... %Aeq
                Beq,... beq
                lbvec,ubvec,... %upper and lower bounds
                [],...
                minOpts);       
    end
end

%% Ru the minimization algorithm if Einf is unknown
if SolveOpts.identEinf==true
   if SolveOpts.constnu==1
       if SolveOpts.KGsame==true
          
           
           
           %% Reshape bounds and initial guesses into vectors
           ubvec=reshape(ub,[1,numel(ub)]);
           lbvec=reshape(lb,[1,numel(lb)]);
           guessvec=reshape(intGuess,[1,numel(intGuess)]);
           
           %% Constrain realtionship between K and G
           nu=exactProps.nu; 
           Aeq=[-3*(1-2*nu)/(2*(1+nu)),1,-3*(1-2*nu)/(2*(1+nu)),1,0];
           Beq=0;
           
           %%run minimization
           identParam=fmincon(@(constParam)func_ViscoCostSGV3(SG,...
               knownParam,constParam,strain,time),...
               guessvec,...
               [],...
               [],...
               Aeq,...
               Beq,...
               lbvec,ubvec,...
               [],...
               minOpts);
           
       end
   end
end

SG_param=identParam;

end